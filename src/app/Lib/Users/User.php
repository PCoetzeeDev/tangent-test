<?php

namespace App\Lib\Users;

// use Illuminate\Contracts\Auth\MustVerifyEmail;
use App\Base\BaseEntity;
use App\Base\HasUniqueCodeTrait;
use Illuminate\Auth\MustVerifyEmail;
use Illuminate\Auth\Passwords\CanResetPassword;
use Illuminate\Auth\Authenticatable;
use Illuminate\Contracts\Auth\Access\Authorizable as AuthorizableContract;
use Illuminate\Contracts\Auth\Authenticatable as AuthenticatableContract;
use Illuminate\Contracts\Auth\CanResetPassword as CanResetPasswordContract;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\SoftDeletes;
use Illuminate\Foundation\Auth\Access\Authorizable;
use Illuminate\Notifications\Notifiable;
use Illuminate\Support\Str;
use Laravel\Sanctum\HasApiTokens;

class User extends BaseEntity implements
    AuthenticatableContract,
    AuthorizableContract,
    CanResetPasswordContract
{
    use HasApiTokens, HasFactory, Notifiable, Authenticatable, Authorizable, CanResetPassword, MustVerifyEmail, SoftDeletes, HasUniqueCodeTrait;

    protected $table = 'users';

    /**
     * The attributes that are mass assignable.
     *
     * @var array<int, string>
     */
    protected $fillable = [
        'code',
        'email',
        'password',
        'archive',
        'banned_at',
    ];

    /**
     * The attributes that should be hidden for serialization.
     *
     * @var array<int, string>
     */
    protected $hidden = [
        'password',
        'remember_token',
    ];

    /**
     * The attributes that should be cast.
     *
     * @var array<string, string>
     */
    protected $casts = [
        'email_verified_at' => 'datetime',
        'banned_at' => 'datetime',
        'archive' => 'array',
    ];

    /**
     * @return bool
     */
    public function isBanned() : bool
    {
        return $this->banned_at !== null;
    }

    /**
     * @return bool|null
     */
    public function delete(): ?bool
    {
        // Archive email address, then scramble it in the column to preserve uniqueness
        $currentEmail = $this->email;
        $this->update([
            'archive' => ['email' => $currentEmail],
            'email' => Str::random()
        ]);

        return parent::delete(); // TODO: Change the autogenerated stub
    }
}
